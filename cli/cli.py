import click
import cli.config
import cli.snakemake

def read_samples_from_file(sample_file):

    with open(sample_file) as f:

        return f.readlines()


@click.group()
def main():
    pass


@main.command(help='Create a config YAML file for running the Snakemake pipeline.')
@click.option('--use-sample-files', is_flag=True, default=False, help='Load sample names from text files instead of passing them as a comma-seperated list.')
@click.option('--genome_build', type=click.Choice(['hg19','hg38']), default='hg38', help='Build of the reference used for annotation.')
@click.argument('fastq_dir')
@click.argument('reference_fasta')
@click.argument('group1')
@click.argument('group2')
@click.argument('output_dir')
@click.argument('target_yaml')
def create_config(use_sample_files, genome_build, fastq_dir, reference_fasta, group1, group2, output_dir, target_yaml):

    cli.config.create_config(use_sample_files, genome_build, fastq_dir, reference_fasta, group1, group2, output_dir, target_yaml)


@main.command(help='Run the snakemake pipeline using a config file')
@click.option('--dry-run', is_flag=True, default=False, help='Only dry-run the workflow.')
@click.argument('config_yaml')
def run_snakemake_from_config(dry_run, config_yaml):

    cli.snakemake.run_snakemake_from_config(dry_run, delete_all_output, config_yaml)


@main.command(help='Run the Snakemake pipeline from command line.')
@click.option('--dry-run', is_flag=True, default=False, help='Only dry-run the pipeline.')
@click.option('--use-sample-files', is_flag=True, default=False, help='Load sample names from text files instead of passing them as a comma-seperated list.')
@click.option('--genome_build', type=click.Choice(['hg19','hg38']), default='hg38', help='Build of the reference used for annotation.')
@click.argument('fastq_dir')
@click.argument('reference_fasta')
@click.argument('group1')
@click.argument('group2')
@click.argument('output_dir')
def run_snakemake(dry_run, use_sample_files, genome_build, fastq_dir, reference_fasta, group1, group2, output_dir):

    cli.snakemake.run_snakemake(dry_run, use_sample_files, genome_build, fastq_dir, reference_fasta, group1, group2, output_dir)


@main.command(help='Remove all files generated by the pipeline. This includes reference genome indices, as well. Use with care!')
@click.option('--dry-run', is_flag=True, default=False, help='Only dry-run deleting the pipeline output.')
@click.argument('config_yaml')
@click.confirmation_option(prompt='Are you sure you want to delete all files generated by the pipeline (this includes reference indices)?')
def delete_all_output(dry_run, config_yaml):

    cli.snakemake.delete_all_output(dry_run, config_yaml)
